<html>
<head>
<meta charset="UTF-8">
<link href="https://unpkg.com/tabulator-tables/dist/css/tabulator.min.css" rel="stylesheet">
<script type="text/javascript" src="https://unpkg.com/tabulator-tables/dist/js/tabulator.min.js"></script>
<link href="https://unpkg.com/tabulator-tables/dist/css/tabulator_${tabulator_theme}.min.css" rel="stylesheet">
<style>
.tabulator, h1 {
    font-family: ${html_font_family};
}
</style>
</head>
<title>GitLab Projects</title>
<body>
<h1>GitLab Projects</h1>
<div class="table-controls">
  <select id="filter-field">
    <option></option>
    <option value="name_with_namespace">Namespace / Name</option>
    <option value="visibility">Visibility</option>
    <option value="visibility_public">Visibility 'public'</option>
    <option value="visibility_internal">Visibility 'internal'</option>
    <option value="default_branch">Default branch</option>
    <option value="default_branch_master">Default branch 'master'</option>
    <option value="packages_enabled">Packages enabled</option>
  </select>

  <select id="filter-type">
    <option value="=">=</option>
    <option value="<"><</option>
    <option value="<="><=</option>
    <option value=">">></option>
    <option value=">=">>=</option>
    <option value="!=">!=</option>
    <option value="like">like</option>
  </select>

  <input id="filter-value" type="text" placeholder="value to filter">

  <button id="filter-clear">Clear Filter</button>
</div>

<div id="gitlab-projects"></div>
<script>
var tabledata = [
%{ for project in projects ~}
    {
        name_with_namespace:                 "${project.name_with_namespace}",
        visibility:                          "${project.visibility}",
        default_branch:                      "${project.default_branch}",
        packages_enabled:                    "${project.packages_enabled}",
        container_registry_enabled:          "${project.container_registry_enabled}",
        container_expiration_policy_enabled: "${project.container_expiration_policy[0].enabled}",
        members: [
%{ for member in project.members ~}
            {
                name: "${member.name}",
                access_level: "${member.access_level}",
            },
%{ endfor ~}
        ],
    },
%{ endfor ~}
];

var table = new Tabulator("#gitlab-projects", {
    data: tabledata,
    columns: [
        { title: "Namespace / Name",           field:"name_with_namespace"         },
        { title: "Visibility",                 field:"visibility",                 headerVertical:"true" },
        { title: "Default branch",             field:"default_branch",             headerVertical:"true" },
        { title: "Packages enabled",           field:"packages_enabled",           headerVertical:"true" },
        { title: "Container registry enabled", field:"container_registry_enabled", headerVertical:"true" },
        { title: "Container expiration policy enabled", field:"container_expiration_policy_enabled", headerVertical:"true" },
    ],
    layout: "fitDataTable",
    initialSort:[
        {column:"name_with_namespace", dir:"${projects_sort}"},
    ],
    rowFormatter: function(row){
       //create and style holder elements
       var holderEl = document.createElement("div");
       var tableEl = document.createElement("div");

       holderEl.style.boxSizing = "border-box";
       holderEl.style.padding = "10px 30px 10px 10px";
       holderEl.style.borderTop = "1px solid #333";
       holderEl.style.borderBottom = "1px solid #333";


       tableEl.style.border = "1px solid #333";

       holderEl.appendChild(tableEl);

       row.getElement().appendChild(holderEl);

       var subTable = new Tabulator(tableEl, {
           layout:"fitColumns",
           data:row.getData().members,
           columns:[
               { title:"Member", field: "name" },
               { title:"Access", field: "access_level" },
           ]
       })
    },
});

//Define variables for input elements
var fieldEl = document.getElementById("filter-field");
var typeEl = document.getElementById("filter-type");
var valueEl = document.getElementById("filter-value");

function filterVisibilityPublic(data) {
    return data.visibility && data.visibility == "public";
}

function filterVisibilityInternal(data) {
    return data.visibility && data.visibility == "internal";
}

function filterDefaultBranchMaster(data) {
    return data.default_branch && data.default_branch == "master";
}

//Trigger setFilter function with correct parameters
function updateFilter(){
  var filterVal = fieldEl.options[fieldEl.selectedIndex].value;
  var typeVal = typeEl.options[typeEl.selectedIndex].value;

  var filter;
  switch (filterVal) {
    case "visibility_public":
        filter = filterVisibilityPublic;
        break;
    case "visibility_internal":
        filter = filterVisibilityInternal;
        break;
    case "default_branch_master":
        filter = filterDefaultBranchMaster;
        break;
    default:
        filter = filterVal;
  }

  if(filterVal == "visibility_public" ){
    typeEl.disabled = true;
    valueEl.disabled = true;
  }else{
    typeEl.disabled = false;
    valueEl.disabled = false;
  }

  if(filterVal){
    table.setFilter(filter,typeVal, valueEl.value);
  }
}

//Update filters on value change
document.getElementById("filter-field").addEventListener("change", updateFilter);
document.getElementById("filter-type").addEventListener("change", updateFilter);
document.getElementById("filter-value").addEventListener("keyup", updateFilter);

//Clear filters on "Clear Filters" button click
document.getElementById("filter-clear").addEventListener("click", function(){
  fieldEl.value = "";
  typeEl.value = "=";
  valueEl.value = "";

  table.clearFilter();
});

</script>
</body>
</html>